---
import {
  Engine,
  Render,
  Bodies,
  Composite,
} from "matter-js";

let engine;
let isPressed = false;

function initializeMatter(sceneRef) {
  const cw = document.body.clientWidth;
  const ch = document.body.clientHeight;

  engine = Engine.create();

  const render = Render.create({
    element: sceneRef,
    engine: engine,
    options: {
      width: cw,
      height: ch,
      wireframes: false,
      background: "transparent",
    },
  });

  Composite.add(engine.world, [
    Bodies.rectangle(cw / 2, -10, cw, 20, {
      isStatic: true,
    }),
    Bodies.rectangle(-10, ch / 2, 20, ch, {
      isStatic: true,
    }),
    Bodies.rectangle(cw / 2, ch + 10, cw, 20, {
      isStatic: true,
    }),
    Bodies.rectangle(cw + 10, ch / 2, 20, ch, {
      isStatic: true,
    }),
  ]);

  Engine.run(engine);
  Render.run(render);
}

function handleDown() {
  isPressed = true;
}

function handleUp() {
  isPressed = false;
}

function handleAddCircle(e) {
  if (isPressed) {
    const ball = Bodies.circle(
      e.clientX,
      e.clientY,
      10 + Math.random() * 30,
      {
        mass: 10,
        restitution: 0.9,
        friction: 0.005,
        render: {
          fillStyle: "#0000ff",
        },
      }
    );
    Composite.add(engine.world, [ball]);
  }
}

function cleanup(sceneRef) {
  const render = sceneRef.render;
  Render.stop(render);
  Composite.clear(engine.world);
  Engine.clear(engine);
  render.canvas.remove();
  render.canvas = null;
  render.context = null;
  render.textures = {};
}
---

<div
  onMouseDown={handleDown}
  onMouseUp={handleUp}
  onMouseMove={handleAddCircle}
>
  <div
    ref={(el) => {
      if (el) {
        initializeMatter(el);
        el.sceneRef = {
          render: Render.create({
            element: el,
            engine: engine,
          }),
        };
      } else {
        cleanup(el.sceneRef);
      }
    }}
    style="width: 100%; height: 100%;"
  >
  </div>
</div>
