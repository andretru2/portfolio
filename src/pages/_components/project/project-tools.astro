---
// import type { Tool } from "@/types";
import { Tools } from "@/config/validations/project-schema";
import InfiniteLoopSlider from "@/components/ui/Infinite-loop-slider.astro";
import { Icon } from "astro-icon/components";
import { random, shuffle } from "@/utils";

interface Props {
  toolKeys: string[];
  transparent?: boolean;
  rows?: number;
  perRow?: number;
}

const {
  toolKeys,
  transparent = false,
  rows = 2,
  perRow = 20,
} = Astro.props as Props;

const tools = shuffle(
  toolKeys.map((toolKey) => {
    return Tools.find((tool) => tool.key === toolKey);
  })
);
---

<div
  class="relative h-full flex shrink-0 flex-col gap-m items-center justify-center overflow-hidden"
>
  {
    [...new Array(rows)].map((row, i) => {
      return (
        <InfiniteLoopSlider
          duration={random(43000, 45000)}
          reverse={i % 2 == 0}
        >
          {tools.slice(0, perRow).map((tool) => (
            <div
              aria-label={tool?.name}
              title={tool?.name}
              class:list={[
                "p-s relative after:corners  ml-xs z-10  shadow-sm    shadow-white/[0.05]  ",
                transparent
                  ? "after:bg-transparent"
                  : "after:bg-bgColor",
              ]}
            >
              <Icon
                name={tool?.icon}
                class="size-7 text-textColor   "
              />
            </div>
          ))}
        </InfiniteLoopSlider>
      );
    })
  }

  <!-- <div class="fade"></div> -->
</div>

<style>
  .fade {
    pointer-events: none;
    background: linear-gradient(
      90deg,
      oklch(14.48% 0 0),
      transparent 10%,
      transparent 90%,
      oklch(14.48% 0 0)
    );
    position: absolute;
    inset: 0;
  }
</style>
