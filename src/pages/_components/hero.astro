---
import { SphereCanvas } from "./hero/canvas/sphere";
import { Swapper } from "@/components/ui/swapper";
import { Section } from "@/components/ui/section";
---

<Section
  client:load
  backgroundColor="hero"
  idName="home"
  padding="none"
  margin="none"
  minHeight="100svh"
  skipRoundCorners
  parallax
  className="  relative bg-bgColorHero  h-full grid place-content-center gap-xl justify-center w-full min-w-7xl [perspective:1000px] overflow-hidden "
>
  <div class="bg-hero absolute"></div>
  <div class="absolute inset-0 h-full w-full -z-10">
    <!-- <Scene client:load /> -->
    <SphereCanvas client:load />
  </div>

  <h6
    class="font-light opacity-90 tracking-widest text-center animate-fade animation-delay-200 animate-fadeInUp"
  >
    ANDRES TRUJILLO
  </h6>
  <p
    class="flex font-semibold fluid:text-7xl font-heading tracking-tighter flex-wrap gap-[0.3ch] xs:max-w-[20ch] md:min-w-[40ch] m-0 text-center resize overflow-hidden items-center justify-center py-4 px-0 animation-delay-300 animate-fadeInUp"
  >
    <span transition:name="swapper-first">Creative </span>
    <!-- <Swapper> -->
    <Swapper client:load>
      <span transition:name="swapper" id="swapper" class=""
        >Frontend Dev</span
      >
    </Swapper>

    <span transition:name="swapper-last">Empowering</span>

    <span class="block w-full font-white">
      Change Through Design</span
    >
    <span class="block w-full"> and Engineering</span>
  </p>
</Section>

<script>
  const WORDS = [
    "Frontend Dev",
    "Architect",
    "Prototyper",
    "Animator",
    "Fullstack Dev",
    "Visual Designer",
    "Web Engineer",
    "Illustrator",
    // "AI Engineer",
  ];
  let count = 0;
  const SWAPPER = document.querySelector(
    "#swapper"
  ) as HTMLElement;

  let interval: NodeJS.Timeout;

  const SWAP = () => {
    if (!document.startViewTransition) {
      SWAPPER.innerText =
        WORDS[(count += 1) % WORDS.length];
    } else {
      document.startViewTransition(() => {
        SWAPPER.innerText =
          WORDS[(count += 1) % WORDS.length];
      });
    }
  };

  const startSwapper = () => {
    interval = setInterval(SWAP, 2000);
  };

  const stopSwapper = () => {
    clearInterval(interval);
  };

  const observeSwapper = () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          startSwapper();
        } else {
          stopSwapper();
        }
      });
    });

    observer.observe(SWAPPER);
  };

  observeSwapper();

  // const SWAP = () => {
  //   if (count < 10) {
  //     if (!document.startViewTransition) {
  //       SWAPPER.innerText =
  //         WORDS[(count += 1) % WORDS.length];
  //     } else {
  //       document.startViewTransition(() => {
  //         SWAPPER.innerText =
  //           WORDS[(count += 1) % WORDS.length];
  //       });
  //     }
  //   } else {
  //     clearInterval(interval);
  //   }
  // };

  // const interval = setInterval(SWAP, 2000);
</script>

<style>
  ::view-transition-new(swapper),
  ::view-transition-old(swapper) {
    height: 100%;
    object-fit: none;
    object-position: top left;
  }

  ::view-transition-old(swapper) {
    animation-name: slide-out;
    animation-duration: 0.75s;
    animation-timing-function: var(--linearAnimation);
  }

  ::view-transition-new(swapper) {
    animation-name: slide-in;
    animation-duration: 0.75s;
    animation-timing-function: var(--linearAnimation);
  }

  ::view-transition-group(swapper-last),
  ::view-transition-group(swapper-first) {
    animation-duration: 0.75s;
    animation-timing-function: var(--linearAnimation);
  }
</style>
