---
import Contact from "@/components/Contact.astro";

import { Section } from "@/components/ui/section";
---

<Section
  client:visible
  idName="contact"
  title="Contact"
  backgroundColor="accent"
  className="flex flex-col justify-center items-center    "
>
  <!-- <Form
    unstable_viewTransition
    className={styles.form}
    method="post"
    ref={nodeRef}
  >
    <Heading
      className={styles.title}
      data-status={status}
      level={3}
      as="h1"
      style={getDelay(
        tokens.base.durationXS,
        initDelay,
        0.3
      )}
    >
      <DecoderText
        text="Say hello"
        start={status !== "exited"}
        delay={300}
      />
    </Heading>
    <Divider
      className={styles.divider}
      data-status={status}
      style={getDelay(
        tokens.base.durationXS,
        initDelay,
        0.4
      )}
    />
    {/* Hidden honeypot field to identify bots */}
    <Input
      className={styles.botkiller}
      label="Name"
      name="name"
      maxLength={MAX_EMAIL_LENGTH}
    />
    <Input
      required
      className={styles.input}
      data-status={status}
      style={getDelay(tokens.base.durationXS, initDelay)}
      autoComplete="email"
      label="Your email"
      type="email"
      name="email"
      maxLength={MAX_EMAIL_LENGTH}
      {...email}
    />
    <Input
      required
      multiline
      className={styles.input}
      data-status={status}
      style={getDelay(tokens.base.durationS, initDelay)}
      autoComplete="off"
      label="Message"
      name="message"
      maxLength={MAX_MESSAGE_LENGTH}
      {...message}
    />
    <Transition
      unmount
      in={!sending && actionData?.errors}
      timeout={msToNum(tokens.base.durationM)}
    >
      {
        ({ status: errorStatus, nodeRef }) => (
          <div
            className={styles.formError}
            ref={nodeRef}
            data-status={errorStatus}
            style={cssProps({
              height: errorStatus
                ? errorRef.current?.offsetHeight
                : 0,
            })}
          >
            <div
              className={styles.formErrorContent}
              ref={errorRef}
            >
              <div className={styles.formErrorMessage}>
                <Icon
                  className={styles.formErrorIcon}
                  icon="error"
                />
                {actionData?.errors?.email}
                {actionData?.errors?.message}
              </div>
            </div>
          </div>
        )
      }
    </Transition>
    <Button
      className={styles.button}
      data-status={status}
      data-sending={sending}
      style={getDelay(tokens.base.durationM, initDelay)}
      disabled={sending}
      loading={sending}
      loadingText="Sending..."
      icon="send"
      type="submit"
    >
      Send message
    </Button>
  </Form>
  )}
</Section>
<Transition unmount in={actionData?.success}>
  {
    ({ status, nodeRef }) => (
      <div
        className={styles.complete}
        aria-live="polite"
        ref={nodeRef}
      >
        <Heading
          level={3}
          as="h3"
          className={styles.completeTitle}
          data-status={status}
        >
          Message Sent
        </Heading>
        <Text
          size="l"
          as="p"
          className={styles.completeText}
          data-status={status}
          style={getDelay(tokens.base.durationXS)}
        >
          Iâ€™ll get back to you within a couple days, sit
          tight
        </Text>
        <Button
          secondary
          iconHoverShift
          className={styles.completeButton}
          data-status={status}
          style={getDelay(tokens.base.durationM)}
          href="/"
          icon="chevron-right"
        >
          Back to homepage
        </Button>
      </div>
    )
  }
</Transition> -->

  <Contact />
</Section>
